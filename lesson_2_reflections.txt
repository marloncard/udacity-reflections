1. What happens when you initialize a repository? Why do you need to do it?
    The folder is now tracked by git and changes can be committed and reversed
    if necessary.

2. How is the staging area different from the working directory and the
repository? What value do you think it offers?
    The staging area allows you to queue up the files to be included in a
    commit. It allows you to separate commits logically as needed.

3. How can you use the staging area to make sure you have one commit per logical
 change?
    I can limit the files being committed to logical groups.

4. What are some situations when branches would be helpful in keeping your
history organized?
    If I needed to work on a new feature or bug fix I could create a branch
    to accomplish this in both situations.

5. How do the diagrams help you visualize the branch structure?
    The diagrams provide a visual aid to help understand relationships of
    different branches and their corresponding commits.

6. What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?
    The result is one branch containing the commit history of both the original
    branches. The diagram shows it was two branches "merging" to become one,
    which is accurate.

7. What are the pros and cons of Git's automatic merging vs. always doing merges
 manually?
    You save a lot of time and remove human error by allowing it to perform
    merges (assuming there are no conflicts).
